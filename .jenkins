pipeline {
    triggers {
        issueCommentTrigger('.*test this please.*')
    }
    agent none
    environment {
        CCACHE_DIR = '/tmp/ccache'
        CCACHE_MAXSIZE = '10G'
        FORTRILINOS_DIR = '/opt/fortrilinos'
        CTEST_OPTIONS = '--timeout 180 --no-compress-output -T Test --test-output-size-passed=65536 --test-output-size-failed=1048576'

        // Run MPI as root
        OMPI_ALLOW_RUN_AS_ROOT = '1'
        OMPI_ALLOW_RUN_AS_ROOT_CONFIRM = '1'
    }
    stages {
        stage('Build') {
            parallel {
                stage('GCC-7.5-MPI') {
                    agent {
                        dockerfile {
                            filename "Dockerfile"
                            dir "docker"
                            args '-v /tmp/ccache:/tmp/ccache'
                            additionalBuildArgs '--build-arg NPROC=4'
                            label 'docker'
                        }
                    }
                    steps {
                        sh 'ccache --zero-stats'
                        sh 'rm -rf build && mkdir -p build'
                        dir('build') {
                            sh '''
                                cmake \
                                  -GNinja \
                                  -D CMAKE_INSTALL_PREFIX=$FORTRILINOS_DIR \
                                  -D CMAKE_BUILD_TYPE=Debug \
                                  -D CMAKE_CXX_COMPILER_LAUNCHER=ccache \
                                  -D MPIEXEC_MAX_NUMPROCS=4 \
                                  -D ForTrilinos_TESTING=ON \
                                  -D ForTrilinos_EXAMPLES=ON \
                                ..
                            '''
                            sh 'ninja -v'
                            sh 'ctest $CTEST_OPTIONS'
                        }
                    }
                    post {
                        always {
                            sh 'ccache --show-stats'
                            xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
                        }
                        success {
                            sh 'cd build && ninja install'
                            sh 'rm -rf test_install && mkdir -p test_install'
                            dir('test_install') {
                                sh 'cp -r ../example/test-installation .'
                                sh '''
                                    cmake \
                                        -D CMAKE_PREFIX_PATH=$FORTRILINOS_DIR \
                                    test-installation
                                '''
                                sh 'make VERBOSE=1'
                                sh 'make test'
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            node('docker') {
                recordIssues(
                    enabledForFailure: true,
                    tools: [gcc()],
                    qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],
                )
            }
        }
    }
}
